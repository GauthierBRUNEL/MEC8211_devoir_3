clc; clear; close all;

filename = 'data/results_LBM.txt'; % Lire depuis /data
fid = fopen(filename, 'r');
if fid == -1
    error('Impossible d''ouvrir le fichier de r√©sultats.');
end

% Initialisation du stockage des perm√©abilit√©s calcul√©es
permeability_values = [];

% Lire le fichier ligne par ligne
while ~feof(fid)
    line = fgetl(fid);
    
    % V√©rifier si la ligne contient la perm√©abilit√© calcul√©e
    if contains(line, 'Perm√©abilit√© calcul√©e:')
        % Extraire la valeur num√©rique apr√®s ":"
        value = sscanf(line, 'Perm√©abilit√© calcul√©e: %f ¬µm¬≤');
        permeability_values = [permeability_values; value];
    end
end

% Fermer le fichier apr√®s lecture
fclose(fid);

% V√©rifier qu'on a bien r√©cup√©r√© des donn√©es
if isempty(permeability_values)
    error('Aucune donn√©e de perm√©abilit√© trouv√©e dans le fichier.');
end

% Transformation log des valeurs (car elles suivent une loi log-normale)
log_permeability = log(permeability_values);

% Estimation des param√®tres de la loi log-normale
mu = mean(log_permeability);    % Moyenne du log
sigma = std(log_permeability);  % √âcart-type du log

% D√©finition des valeurs pour la PDF et la CDF
x = linspace(min(permeability_values), max(permeability_values), 100);
pdf_values = lognpdf(x, mu, sigma);
cdf_values = logncdf(x, mu, sigma);

% üé® **Tracer la CDF**
figure;
plot(x, cdf_values, 'b-', 'LineWidth', 2);
grid on;
xlabel('Perm√©abilit√© calcul√©e (\mum^2)');
ylabel('Probabilit√© cumulative (CDF)');
title('Fonction de R√©partition Empirique (CDF) de la Perm√©abilit√©');
saveas(gcf, '../results/CDF_plot.png');

% üé® **Tracer la PDF**
figure;
plot(x, pdf_values, 'r-', 'LineWidth', 2); % Courbe de densit√© log-normale
grid on;
xlabel('Perm√©abilit√© calcul√©e (\mum^2)');
ylabel('Densit√© de probabilit√© (PDF)');
title('Densit√© de Probabilit√© (PDF) de la Perm√©abilit√©');
saveas(gcf, '../results/PDF_plot.png');

%%
% V√©rifier que des donn√©es sont disponibles
if isempty(permeability_values)
    error('Aucune donn√©e de perm√©abilit√© trouv√©e.');
end

% Transformation log des valeurs (car elles suivent une loi log-normale)
log_permeability = log(permeability_values);

% Calcul de la m√©diane et du FVG
mu = mean(log_permeability);    % Moyenne dans l'espace log
sigma = std(log_permeability);  % √âcart-type dans l'espace log

mediane = exp(mu);              % M√©diane de la loi log-normale
FVG = exp(sigma);               % Facteur de Variation G√©om√©trique (FVG)

% Calcul de l'intervalle d'incertitude
borne_inf = mediane / FVG;
borne_sup = mediane * FVG;

% Affichage des r√©sultats
fprintf('M√©diane de la perm√©abilit√© : %.3f ¬µm¬≤\n', mediane);
fprintf('Facteur de Variation G√©om√©trique (FVG) : %.3f\n', FVG);
fprintf('Intervalle d''incertitude (1 √©cart-type) : [%.3f , %.3f] ¬µm¬≤\n', borne_inf, borne_sup);

% Calcul des incertitudes asym√©triques
u_moins = mediane - (mediane / FVG);
u_plus = (mediane * FVG) - mediane;

% Affichage des incertitudes asym√©triques
fprintf('Incertitude inf√©rieure u^- : %.3f ¬µm¬≤\n', u_moins);
fprintf('Incertitude sup√©rieure u^+ : %.3f ¬µm¬≤\n', u_plus);
